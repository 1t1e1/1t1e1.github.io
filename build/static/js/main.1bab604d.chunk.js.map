{"version":3,"sources":["component/Header.js","routes.js","container/Homepage.js","container/Notes.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","useState","isOpen","setIsOpen","Navbar","color","light","expand","NavbarBrand","href","NavbarToggler","onClick","Collapse","navbar","Nav","className","NavItem","NavLink","routes","path","exact","component","Component","App","map","route","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oRAyCeA,EA9BA,SAACC,GAAW,IAAD,EACGC,oBAAS,GADZ,mBAClBC,EADkB,KACVC,EADU,KAKzB,OACC,6BACC,kBAACC,EAAA,EAAD,CAAQC,MAAM,QAAQC,OAAK,EAACC,OAAO,MAClC,kBAACC,EAAA,EAAD,CAAaC,KAAK,KAAlB,aACA,kBAACC,EAAA,EAAD,CAAeC,QANH,kBAAMR,GAAWD,MAO7B,kBAACU,EAAA,EAAD,CAAUV,OAAQA,EAAQW,QAAM,GAC/B,kBAACC,EAAA,EAAD,CAAKC,UAAU,UAAUF,QAAM,GAC9B,kBAACG,EAAA,EAAD,KACC,kBAACC,EAAA,EAAD,CAASR,KAAK,WAAd,WACU,IACX,kBAACO,EAAA,EAAD,KACC,kBAACC,EAAA,EAAD,CAASR,KAAK,cAAd,eAED,kBAACO,EAAA,EAAD,KACC,kBAACC,EAAA,EAAD,CAASR,KAAK,4BAAd,gB,+CCfQS,EAbA,CACd,CACCC,KAAM,IACNC,OAAO,EACPC,U,uKCFA,OACC,6BACC,oCACA,4CACA,uD,GANkCC,cDMrC,CACCH,KAAM,SACNC,OAAO,EACPC,U,uKEPA,OACC,6BACC,4CACA,yC,GAL+BC,eCuBpBC,MApBf,WACC,OACC,kBAAC,IAAD,KACC,6BACC,kBAAC,EAAD,MACA,kBAAC,IAAD,KACEL,EAAOM,KAAI,SAACC,GAAD,OACX,kBAAC,IAAD,CACCC,IAAKD,EAAMN,KACXA,KAAMM,EAAMN,KACZC,MAAOK,EAAML,MACbC,UAAWI,EAAMJ,mBCJJM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACR,kBAAC,IAAMC,WAAP,KACC,kBAAC,EAAD,OAEDC,SAASC,eAAe,SDwHnB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.1bab604d.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport {\n\tCollapse,\n\tNavbar,\n\tNavbarToggler,\n\tNavbarBrand,\n\tNav,\n\tNavItem,\n\tNavLink,\n} from \"reactstrap\";\n\nconst Header = (props) => {\n\tconst [isOpen, setIsOpen] = useState(false);\n\n\tconst toggle = () => setIsOpen(!isOpen);\n\n\treturn (\n\t\t<div>\n\t\t\t<Navbar color=\"light\" light expand=\"md\">\n\t\t\t\t<NavbarBrand href=\"/\">Ana Sayfa</NavbarBrand>\n\t\t\t\t<NavbarToggler onClick={toggle} />\n\t\t\t\t<Collapse isOpen={isOpen} navbar>\n\t\t\t\t\t<Nav className=\"mr-auto\" navbar>\n\t\t\t\t\t\t<NavItem>\n\t\t\t\t\t\t\t<NavLink href=\"/notes/\">Notlar</NavLink>\n\t\t\t\t\t\t</NavItem>{\" \"}\n\t\t\t\t\t\t<NavItem>\n\t\t\t\t\t\t\t<NavLink href=\"/projects/\">Projectler</NavLink>\n\t\t\t\t\t\t</NavItem>\n\t\t\t\t\t\t<NavItem>\n\t\t\t\t\t\t\t<NavLink href=\"https://github.com/1t1e1\">\n\t\t\t\t\t\t\t\tGitHub\n\t\t\t\t\t\t\t</NavLink>\n\t\t\t\t\t\t</NavItem>\n\t\t\t\t\t</Nav>\n\t\t\t\t</Collapse>\n\t\t\t</Navbar>\n\t\t</div>\n\t);\n};\n\nexport default Header;\n","import { Homepage, Notes } from \"./container\";\n\nconst routes = [\n\t{\n\t\tpath: \"/\",\n\t\texact: true,\n\t\tcomponent: Homepage,\n\t},\n\t{\n\t\tpath: \"/notes\",\n\t\texact: true,\n\t\tcomponent: Notes,\n\t},\n];\n\nexport default routes;\n","import React, { Component } from \"react\";\n\nexport default class Homepage extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<h1>hi!!</h1>\n\t\t\t\t<h3> Talha Baris</h3>\n\t\t\t\t<h3> This is home page</h3>\n\t\t\t</div>\n\t\t);\n\t}\n}\n","import React, { Component } from \"react\";\n\nexport default class Notes extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<h3> Not Sayfasi</h3>\n\t\t\t\t<h1>hi!!</h1>\n\t\t\t</div>\n\t\t);\n\t}\n}\n","import React from \"react\";\nimport { Header } from \"./component\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport routes from \"./routes\";\n\nfunction App() {\n\treturn (\n\t\t<Router>\n\t\t\t<div>\n\t\t\t\t<Header></Header>\n\t\t\t\t<Switch>\n\t\t\t\t\t{routes.map((route) => (\n\t\t\t\t\t\t<Route\n\t\t\t\t\t\t\tkey={route.path}\n\t\t\t\t\t\t\tpath={route.path}\n\t\t\t\t\t\t\texact={route.exact}\n\t\t\t\t\t\t\tcomponent={route.component}\n\t\t\t\t\t\t></Route>\n\t\t\t\t\t))}\n\t\t\t\t</Switch>\n\t\t\t</div>\n\t\t</Router>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}